@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Edit Prescription";
}
@model Zencareservice.Models.Prescs

<!DOCTYPE html>
<html>
<head>
    <title>Edit Prescription</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="Gopi">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
</head>
<body>
    <form class="prescription" method="POST" asp-action="Prescedit" asp-controller="Prescriptions" onsubmit="return validateForm()">
        <section class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1>Prescription</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a asp-action="Presclist" asp-controller="Prescriptions">Prescription List</a></li>
                            <li class="breadcrumb-item active"><b style="color:black">Edit Prescription</b></li>
                        </ol>
                    </div>
                </div>
            </div>
        </section>
        <div class="container-fluid">
            <div class="card card-success">
                <div class="card-header">
                    <h1 class="card-title">@ViewData["Title"]</h1>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                     <div class="form-row">
                        <div class="form-group col-md-3">
                            <label asp-for="AppointmentCode">Prescription Category</label>
                          @*   @Html.DropDownListFor(model => model.AppointmentCode, ViewBag.AptCode as List<SelectListItem>, "Please select", new { @class = "form-control", Id = "DDLPresccategory" }) *@
                            <input asp-for="AppointmentCode" type="text" class="form-control" id="aptcode"  readonly />
                              <span asp-validation-for="AppointmentCode" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <label asp-for="PatientFirstName">Patient First Name</label>
                            <input asp-for="PatientFirstName" type="text" class="form-control" id="pfname" readonly />
                            <span asp-validation-for="PatientFirstName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="PatientLastName">Patient Last Name</label>
                            <input asp-for="PatientLastName" type="text" class="form-control" id="plname" readonly />
                            <span asp-validation-for="PatientLastName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="Patientphoneno">Contact No</label>
                            <input asp-for="Patientphoneno" type="tel" class="form-control" id="patcontact" readonly />
                            <span asp-validation-for="Patientphoneno" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="PatientEmail">Patient Email</label>
                            <input asp-for="PatientEmail" type="text" class="form-control" id="patemail" readonly />
                            <span asp-validation-for="PatientEmail" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <label asp-for="PatientAge">Age</label>
                            <input asp-for="PatientAge" type="text" class="form-control" id="patage" readonly />
                            <span asp-validation-for="PatientAge"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="PatBloodgroup">Patient Bloodgroup</label>
                            @* @Html.DropDownListFor(model => model.PatBloodgroup, ViewBag.Bloodgroup as List<SelectListItem>, "Please select", new { @class = "form-control", Id = "PatBloodgroup" }) *@
                            <input asp-for="PatBloodgroup" type="text" class="form-control" id="PatBloodgroup" readonly />
                            <span asp-validation-for="PatBloodgroup" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="PatWeight">Patient Weight</label>
                            <input asp-for="PatWeight" type="number" class="form-control" min="0" max="100" id="pweight" placeholder="in Kgs" readonly />
                            <span asp-validation-for="PatWeight" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label asp-for="DoctorFirstName">Doctor First Name</label>
                            <input asp-for="DoctorFirstName" type="text" class="form-control" id="dfname"  readonly />
                            <span asp-validation-for="DoctorFirstName" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <a href="#" onclick="createTable()">
                        <ion-icon name="add-circle-outline"></ion-icon> Add Medication
                    </a>
                    <table id="example1" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>SlNo</th>
                                <th>Prescription</th>
                                <th>Dosage</th>
                                <th>No of Days</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.showlist1)
                            {
                                <tr>
                                    <td>@item.SlNo</td>
                                    <td><input type="text" value="@item.Prescription" /></td>
                                    <td>
                                        <input type="range" min="0" max="1000" value="@item.Dosage" oninput="updateDosageIndicator(this.value, @item.SlNo)" />
                                        <span id="dosageIndicator_@item.SlNo">@item.Dosage mg</span>
                                    </td>
                                    <td>
                                        <input type="number" value="@item.NoOfDays" min="0" max="100" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="deleteRow(this)">
                                            <span class="glyphicon glyphicon-trash"></span> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-default" onclick="resetForm()">Cancel</button>
                    <button type="submit" class="btn btn-success float-right">Update Prescription</button>
                </div>
            </div>
        </div>
    </form>

    <script>
        var aptcode;

        function createTable() {
            var tbody = document.querySelector('#example1 tbody');
            var row = tbody.insertRow();
            var slNoCell = row.insertCell(0);
            var prescriptionCell = row.insertCell(1);
            var dosageCell = row.insertCell(2);
            var noofdaysCell = row.insertCell(3);
            var actionCell = row.insertCell(4);

            slNoCell.textContent = tbody.children.length + 1;

            prescriptionCell.innerHTML = '<input type="text">';
            noofdaysCell.innerHTML = '<input type="number" value="0" min="0" max="100">';

            var dosageValue = 5;
            var maxDosage = 1000;
            dosageCell.innerHTML = '<input type="range" min="0" max="' + maxDosage + '" value="' + dosageValue + '" oninput="updateDosageIndicator(this.value, ' + (tbody.children.length + 1) + ')">';
            dosageCell.innerHTML += '<span id="dosageIndicator_' + (tbody.children.length + 1) + '">' + dosageValue + ' mg</span>';

            var deleteButton = document.createElement('button');
            deleteButton.type = 'button';
            deleteButton.className = 'btn btn-danger btn-sm';
            deleteButton.innerHTML = '<span class="glyphicon glyphicon-trash"></span> Delete';
            deleteButton.addEventListener('click', function () {
                tbody.removeChild(row);
                updateSlNo();
            });
            actionCell.appendChild(deleteButton);
        }

        function updateSlNo() {
            var rows = document.querySelectorAll('#example1 tbody tr');
            for (var i = 0; i < rows.length -1; i++) {
                rows[i].cells[0].textContent  = i +1;
            }
        }

        function updateDosageIndicator(value, rowNumber) {
            var indicator = document.getElementById('dosageIndicator_' + rowNumber);
            var dosageValue = parseInt(value, 10);
            var newDosage = dosageValue + 1;
            indicator.textContent = newDosage + ' mg';
        }

        function validateForm() {
            var aptCode = document.getElementById("DDLPresccategory").value;
            if (aptCode === '') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select an Appointment Code!'
                });
                return false;
            }

            var rows = document.querySelectorAll('#example1 tbody tr');
            if (rows.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please add at least one medication!'
                });
                return false;
            }

            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var prescription = row.querySelector('input[type="text"]').value;
                var dosage = row.querySelector('input[type="range"]').value;
                var noofdays = row.querySelector('input[type="number"]').value;

                if (prescription.trim() === '') {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please enter a Prescription Item for all rows!'
                    });
                    return false;
                }

                if (dosage == 5) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Dosage value has not been changed'
                    });
                    return false;
                }

                if (noofdays.trim() === '' || isNaN(parseInt(noofdays))) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Warning',
                        text: 'Please enter a valid number of days for all rows!'
                    });
                    return false;
                }
            }

            saveData();
            return true;
        }

        function saveData() {
            var dataToSave = [];
            $('#example1 tbody tr').each(function () {
                var row = $(this);
                var slno = row.find('td:eq(0)').text();
                var prescription = row.find('input[type="text"]').val();
                var dosage = row.find('input[type="range"]').val();
                var noofdays = row.find('input[type="number"]').val();

                dataToSave.push({
                    slno: slno,
                    prescription: prescription,
                    dosage: dosage,
                    noofdays: noofdays,
                    aptcode: aptcode
                });
            });

            $.ajax({
                url: '@Url.Action("SaveItemPrescription", "Prescriptions")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataToSave),
                success: function (response) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Data saved successfully!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.reload();
                        }
                    });
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error saving data. Please try again.'
                    });
                }
            });
        }

        function validatePatient() {
            var weight = parseInt(document.getElementById("pweight").value);
            var bloodgroup = $("#PatBloodgroup").val();

            if (!bloodgroup || bloodgroup === "Please select") {
                valid = false;
                $("#PatBloodgroup").addClass("is-invalid");
            } else {
                $("#PatBloodgroup").removeClass("is-invalid");
            }

            if (!isNaN(weight) && weight > 180) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Weight should not be more than 180 kg!'
                });
                document.getElementById("pweight").value = '';
                return false;
            }
        }

        document.getElementById("pweight").addEventListener("input", validatePatient);

  
        function resetForm() {
            location.reload();
        }
    </script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</body>
</html>

